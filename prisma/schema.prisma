// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}


model User {
  user_id     String    @id @default(uuid()) // Clerk ID
  first_name  String
  last_name   String
  email_id    String    @unique
  username    String    @unique
  payerTransactions Transaction[] @relation("Sender")
  receiverTransactions Transaction[] @relation("Receiver")
  account     Account[] @relation("UserId") // One-to-One relation with Account
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transaction {
  unique_id String  @id @default(uuid()) // UUID for transaction ID
  sender     User    @relation("Sender", fields: [senderId], references: [user_id])
  senderId   String
  receiver  User    @relation("Receiver", fields: [receiverId], references: [user_id])
  receiverId String
  amount    Float
  status    TransactionStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id        String     @id @default(uuid())
  balance   Float
  active    Boolean @default(true)
  user      User    @relation("UserId",fields: [userId], references: [user_id])
  userId    String  @unique // Reference to User
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}